C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN RC522.OBJ
COMPILER INVOKED BY: F:\keilc51\C51\BIN\C51.EXE RC522.C LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "main.h"
   2           
   3          #define MAXRLEN 18
   4                           
   5          void delay2(unsigned int z)
   6          {
   7   1              unsigned int x,y;
   8   1              for(x=z;x>0;x--)
   9   1              for(y=110;y>0;y--);     
  10   1      }  
  11          
  12                     
  13          /////////////////////////////////////////////////////////////////////
  14          //功    能：寻卡
  15          //参数说明: req_code[IN]:寻卡方式
  16          //                0x52 = 寻感应区内所有符合14443A标准的卡
  17          //                0x26 = 寻未进入休眠状态的卡
  18          //          pTagType[OUT]：卡片类型代码
  19          //                0x4400 = Mifare_UltraLight
  20          //                0x0400 = Mifare_One(S50)
  21          //                0x0200 = Mifare_One(S70)
  22          //                0x0800 = Mifare_Pro(X)
  23          //                0x4403 = Mifare_DESFire
  24          //返    回: 成功返回MI_OK
  25          /////////////////////////////////////////////////////////////////////
  26          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  27          {
  28   1         char status;  
  29   1         unsigned int  unLen;
  30   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  31   1      
  32   1         ClearBitMask(Status2Reg,0x08);
  33   1         WriteRawRC(BitFramingReg,0x07);
  34   1         SetBitMask(TxControlReg,0x03);
  35   1       
  36   1         ucComMF522Buf[0] = req_code;
  37   1      
  38   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  39   1         
  40   1         if ((status == MI_OK) && (unLen == 0x10))
  41   1         {    
  42   2             *pTagType     = ucComMF522Buf[0];
  43   2             *(pTagType+1) = ucComMF522Buf[1];
  44   2         }
  45   1         else
  46   1         {   status = MI_ERR;  
  47   2       
  48   2      
  49   2      
  50   2              }
  51   1         
  52   1         return status;
  53   1      }
  54          
  55          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 2   

  56          //功    能：防冲撞
  57          //参数说明: pSnr[OUT]:卡片序列号，4字节
  58          //返    回: 成功返回MI_OK
  59          /////////////////////////////////////////////////////////////////////  
  60          char PcdAnticoll(unsigned char *pSnr)
  61          {
  62   1          char status;
  63   1          unsigned char i,snr_check=0;
  64   1          unsigned int  unLen;
  65   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  66   1          
  67   1      
  68   1          ClearBitMask(Status2Reg,0x08);
  69   1          WriteRawRC(BitFramingReg,0x00);
  70   1          ClearBitMask(CollReg,0x80);
  71   1       
  72   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  73   1          ucComMF522Buf[1] = 0x20;
  74   1      
  75   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  76   1      
  77   1          if (status == MI_OK)
  78   1          {
  79   2               for (i=0; i<4; i++)
  80   2               {   
  81   3                   *(pSnr+i)  = ucComMF522Buf[i];
  82   3                   snr_check ^= ucComMF522Buf[i];
  83   3      
  84   3               }
  85   2               if (snr_check != ucComMF522Buf[i])
  86   2               {   status = MI_ERR;    }
  87   2          }
  88   1          
  89   1          SetBitMask(CollReg,0x80);
  90   1          return status;
  91   1      }
  92          
  93          /////////////////////////////////////////////////////////////////////
  94          //功    能：选定卡片
  95          //参数说明: pSnr[IN]:卡片序列号，4字节
  96          //返    回: 成功返回MI_OK
  97          /////////////////////////////////////////////////////////////////////
  98          char PcdSelect(unsigned char *pSnr)
  99          {
 100   1          char status;
 101   1          unsigned char i;
 102   1          unsigned int  unLen;
 103   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 104   1          
 105   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
 106   1          ucComMF522Buf[1] = 0x70;
 107   1          ucComMF522Buf[6] = 0;
 108   1          for (i=0; i<4; i++)
 109   1          {
 110   2              ucComMF522Buf[i+2] = *(pSnr+i);
 111   2              ucComMF522Buf[6]  ^= *(pSnr+i);
 112   2          }
 113   1          CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
 114   1        
 115   1          ClearBitMask(Status2Reg,0x08);
 116   1      
 117   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 3   

 118   1          
 119   1          if ((status == MI_OK) && (unLen == 0x18))
 120   1          {   status = MI_OK;  }
 121   1          else
 122   1          {   status = MI_ERR;    }
 123   1      
 124   1          return status;
 125   1      }
 126          
 127          /////////////////////////////////////////////////////////////////////
 128          //功    能：验证卡片密码
 129          //参数说明: auth_mode[IN]: 密码验证模式
 130          //                 0x60 = 验证A密钥
 131          //                 0x61 = 验证B密钥 
 132          //          addr[IN]：块地址
 133          //          pKey[IN]：密码
 134          //          pSnr[IN]：卡片序列号，4字节
 135          //返    回: 成功返回MI_OK
 136          /////////////////////////////////////////////////////////////////////               
 137          char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
 138          {
 139   1          char status;
 140   1          unsigned int  unLen;
 141   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 142   1      
 143   1          ucComMF522Buf[0] = auth_mode;
 144   1          ucComMF522Buf[1] = addr;
 145   1          for (i=0; i<6; i++)
 146   1          {    ucComMF522Buf[i+2] = *(pKey+i);   }
 147   1          for (i=0; i<6; i++)
 148   1          {    ucComMF522Buf[i+8] = *(pSnr+i);   }
 149   1       //   memcpy(&ucComMF522Buf[2], pKey, 6); 
 150   1       //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
 151   1          
 152   1          status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
 153   1          if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
 154   1          {   status = MI_ERR;   }
 155   1          
 156   1          return status;
 157   1      }
 158          
 159          /////////////////////////////////////////////////////////////////////
 160          //功    能：读取M1卡一块数据
 161          //参数说明: addr[IN]：块地址
 162          //          pData[OUT]：读出的数据，16字节
 163          //返    回: 成功返回MI_OK
 164          ///////////////////////////////////////////////////////////////////// 
 165          char PcdRead(unsigned char addr,unsigned char *pData)
 166          {
 167   1          char status;
 168   1          unsigned int  unLen;
 169   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 170   1      
 171   1          ucComMF522Buf[0] = PICC_READ;
 172   1          ucComMF522Buf[1] = addr;
 173   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 174   1         
 175   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 176   1          if ((status == MI_OK) && (unLen == 0x90))
 177   1       //   {   memcpy(pData, ucComMF522Buf, 16);   }
 178   1          {
 179   2              for (i=0; i<16; i++)
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 4   

 180   2              {    *(pData+i) = ucComMF522Buf[i];   }
 181   2          }
 182   1          else
 183   1          {   status = MI_ERR;   }
 184   1          
 185   1          return status;
 186   1      }
 187          
 188          /////////////////////////////////////////////////////////////////////
 189          //功    能：写数据到M1卡一块
 190          //参数说明: addr[IN]：块地址
 191          //          pData[IN]：写入的数据，16字节
 192          //返    回: 成功返回MI_OK
 193          /////////////////////////////////////////////////////////////////////                  
 194          char PcdWrite(unsigned char addr,unsigned char *pData)
 195          {
 196   1          char status;
 197   1          unsigned int  unLen;
 198   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 199   1          
 200   1          ucComMF522Buf[0] = PICC_WRITE;
 201   1          ucComMF522Buf[1] = addr;
 202   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 203   1       
 204   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 205   1      
 206   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 207   1          {   status = MI_ERR;   }
 208   1              
 209   1          if (status == MI_OK)
 210   1          {
 211   2              //memcpy(ucComMF522Buf, pData, 16);
 212   2              for (i=0; i<16; i++)
 213   2              {    ucComMF522Buf[i] = *(pData+i);   }
 214   2              CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
 215   2      
 216   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
 217   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 218   2              {   status = MI_ERR;   }
 219   2          }
 220   1          
 221   1          return status;
 222   1      }
 223          
 224          /////////////////////////////////////////////////////////////////////
 225          //功    能：扣款和充值
 226          //参数说明: dd_mode[IN]：命令字
 227          //               0xC0 = 扣款
 228          //               0xC1 = 充值
 229          //          addr[IN]：钱包地址
 230          //          pValue[IN]：4字节增(减)值，低位在前
 231          //返    回: 成功返回MI_OK
 232          /////////////////////////////////////////////////////////////////////                 
 233          char PcdValue(unsigned char dd_mode,unsigned char addr,unsigned char *pValue)
 234          {
 235   1          char status;
 236   1          unsigned int  unLen;
 237   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 238   1          
 239   1          ucComMF522Buf[0] = dd_mode;
 240   1          ucComMF522Buf[1] = addr;
 241   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 5   

 242   1       
 243   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 244   1      
 245   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 246   1          {   status = MI_ERR;   }
 247   1              
 248   1          if (status == MI_OK)
 249   1          {
 250   2             // memcpy(ucComMF522Buf, pValue, 4);
 251   2              for (i=0; i<16; i++)
 252   2              {    ucComMF522Buf[i] = *(pValue+i);   }
 253   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 254   2              unLen = 0;
 255   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 256   2              if (status != MI_ERR)
 257   2              {    status = MI_OK;    }
 258   2          }
 259   1          
 260   1          if (status == MI_OK)
 261   1          {
 262   2              ucComMF522Buf[0] = PICC_TRANSFER;
 263   2              ucComMF522Buf[1] = addr;
 264   2              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]); 
 265   2         
 266   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 267   2      
 268   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 269   2              {   status = MI_ERR;   }
 270   2          }
 271   1          return status;
 272   1      }
 273          
 274          /////////////////////////////////////////////////////////////////////
 275          //功    能：备份钱包
 276          //参数说明: sourceaddr[IN]：源地址
 277          //          goaladdr[IN]：目标地址
 278          //返    回: 成功返回MI_OK
 279          /////////////////////////////////////////////////////////////////////
 280          char PcdBakValue(unsigned char sourceaddr, unsigned char goaladdr)
 281          {
 282   1          char status;
 283   1          unsigned int  unLen;
 284   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 285   1      
 286   1          ucComMF522Buf[0] = PICC_RESTORE;
 287   1          ucComMF522Buf[1] = sourceaddr;
 288   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 289   1       
 290   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 291   1      
 292   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 293   1          {   status = MI_ERR;   }
 294   1          
 295   1          if (status == MI_OK)
 296   1          {
 297   2              ucComMF522Buf[0] = 0;
 298   2              ucComMF522Buf[1] = 0;
 299   2              ucComMF522Buf[2] = 0;
 300   2              ucComMF522Buf[3] = 0;
 301   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 302   2       
 303   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 6   

 304   2              if (status != MI_ERR)
 305   2              {    status = MI_OK;    }
 306   2          }
 307   1          
 308   1          if (status != MI_OK)
 309   1          {    return MI_ERR;   }
 310   1          
 311   1          ucComMF522Buf[0] = PICC_TRANSFER;
 312   1          ucComMF522Buf[1] = goaladdr;
 313   1      
 314   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 315   1       
 316   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 317   1      
 318   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 319   1          {   status = MI_ERR;   }
 320   1      
 321   1          return status;
 322   1      }
 323          
 324          
 325          /////////////////////////////////////////////////////////////////////
 326          //功    能：命令卡片进入休眠状态
 327          //返    回: 成功返回MI_OK
 328          /////////////////////////////////////////////////////////////////////
 329          char PcdHalt(void)
 330          {
 331   1          char status;
 332   1          unsigned int  unLen;
 333   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 334   1      
 335   1          ucComMF522Buf[0] = PICC_HALT;
 336   1          ucComMF522Buf[1] = 0;
 337   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 338   1       
 339   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 340   1      
 341   1          return MI_OK;
 342   1      }
 343          
 344          /////////////////////////////////////////////////////////////////////
 345          //用MF522计算CRC16函数
 346          /////////////////////////////////////////////////////////////////////
 347          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 348          {
 349   1          unsigned char i,n;
 350   1          ClearBitMask(DivIrqReg,0x04);
 351   1          WriteRawRC(CommandReg,PCD_IDLE);
 352   1          SetBitMask(FIFOLevelReg,0x80);
 353   1          for (i=0; i<len; i++)
 354   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 355   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 356   1          i = 0xFF;
 357   1          do 
 358   1          {
 359   2              n = ReadRawRC(DivIrqReg);
 360   2              i--;
 361   2          }
 362   1          while ((i!=0) && !(n&0x04));
 363   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 364   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 365   1      }
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 7   

 366          
 367          /////////////////////////////////////////////////////////////////////
 368          //功    能：复位RC522
 369          //返    回: 成功返回MI_OK
 370          /////////////////////////////////////////////////////////////////////
 371          char PcdReset(void)
 372          {
 373   1              //unsigned char i;
 374   1          MF522_RST=1;
 375   1      
 376   1                      _nop_();                  
 377   1      
 378   1          MF522_RST=0;
 379   1      
 380   1                      _nop_();                   
 381   1      
 382   1          MF522_RST=1;
 383   1      
 384   1                      delay2(10);               
 385   1              
 386   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 387   1      
 388   1                      _nop_();                  
 389   1              
 390   1          
 391   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 392   1          WriteRawRC(TReloadRegL,30);           
 393   1          WriteRawRC(TReloadRegH,0);
 394   1          WriteRawRC(TModeReg,0x8D);
 395   1          WriteRawRC(TPrescalerReg,0x3E);
 396   1         WriteRawRC(TxAutoReg,0x40);
 397   1          return MI_OK;
 398   1      }
 399          
 400          /////////////////////////////////////////////////////////////////////
 401          //功    能：读RC632寄存器
 402          //参数说明：Address[IN]:寄存器地址
 403          //返    回：读出的值
 404          /////////////////////////////////////////////////////////////////////
 405          unsigned char ReadRawRC(unsigned char Address)
 406          {
 407   1           unsigned char i, ucAddr;
 408   1           unsigned char ucResult=0;
 409   1      
 410   1           MF522_SCK = 0;
 411   1           MF522_SDA = 0;
 412   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 413   1      
 414   1           for(i=8;i>0;i--)
 415   1           {
 416   2               MF522_MOSI = ((ucAddr&0x80)==0x80);
 417   2               MF522_SCK = 1;
 418   2               ucAddr <<= 1;
 419   2               MF522_SCK = 0;
 420   2           }
 421   1      
 422   1           for(i=8;i>0;i--)
 423   1           {
 424   2               MF522_SCK = 1;
 425   2               ucResult <<= 1;
 426   2               ucResult|=(bit)MF522_MISO;
 427   2               MF522_SCK = 0;
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 8   

 428   2           }
 429   1      
 430   1           MF522_SDA = 1;
 431   1           MF522_SCK = 1;
 432   1           return ucResult;
 433   1      }
 434          
 435          /////////////////////////////////////////////////////////////////////
 436          //功    能：写RC632寄存器
 437          //参数说明：Address[IN]:寄存器地址
 438          //          value[IN]:写入的值
 439          /////////////////////////////////////////////////////////////////////
 440          void WriteRawRC(unsigned char Address, unsigned char value)
 441          {  
 442   1          unsigned char i, ucAddr;
 443   1      
 444   1          MF522_SCK = 0;
 445   1          MF522_SDA = 0;
 446   1          ucAddr = ((Address<<1)&0x7E);
 447   1      
 448   1          for(i=8;i>0;i--)
 449   1          {
 450   2              MF522_MOSI = ((ucAddr&0x80)==0x80);
 451   2              MF522_SCK = 1;
 452   2              ucAddr <<= 1;
 453   2              MF522_SCK = 0;
 454   2          }
 455   1      
 456   1          for(i=8;i>0;i--)
 457   1          {
 458   2              MF522_MOSI = ((value&0x80)==0x80);
 459   2              MF522_SCK = 1;
 460   2              value <<= 1;
 461   2              MF522_SCK = 0;
 462   2          }
 463   1          MF522_SDA = 1;
 464   1          MF522_SCK = 1;
 465   1      }
 466          
 467          /////////////////////////////////////////////////////////////////////
 468          //功    能：置RC522寄存器位
 469          //参数说明：reg[IN]:寄存器地址
 470          //          mask[IN]:置位值
 471          /////////////////////////////////////////////////////////////////////
 472          void SetBitMask(unsigned char reg,unsigned char mask)  
 473          {
 474   1          char tmp = 0x0;
 475   1          tmp = ReadRawRC(reg);
 476   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 477   1      }
 478          
 479          /////////////////////////////////////////////////////////////////////
 480          //功    能：清RC522寄存器位
 481          //参数说明：reg[IN]:寄存器地址
 482          //          mask[IN]:清位值
 483          /////////////////////////////////////////////////////////////////////
 484          void ClearBitMask(unsigned char reg,unsigned char mask)  
 485          {
 486   1          char tmp = 0x0;
 487   1          tmp = ReadRawRC(reg);
 488   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 489   1      } 
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 9   

 490          
 491          /////////////////////////////////////////////////////////////////////
 492          //功    能：通过RC522和ISO14443卡通讯
 493          //参数说明：Command[IN]:RC522命令字
 494          //          pInData[IN]:通过RC522发送到卡片的数据
 495          //          InLenByte[IN]:发送数据的字节长度
 496          //          pOutData[OUT]:接收到的卡片返回数据
 497          //          *pOutLenBit[OUT]:返回数据的位长度
 498          /////////////////////////////////////////////////////////////////////
 499          char PcdComMF522(unsigned char Command, 
 500                           unsigned char *pInData, 
 501                           unsigned char InLenByte,
 502                           unsigned char *pOutData, 
 503                           unsigned int  *pOutLenBit)
 504          {
 505   1          char status = MI_ERR;
 506   1          unsigned char irqEn   = 0x00;
 507   1          unsigned char waitFor = 0x00;
 508   1          unsigned char lastBits;
 509   1          unsigned char n;
 510   1          unsigned int i;
 511   1          switch (Command)
 512   1          {
 513   2             case PCD_AUTHENT:
 514   2                irqEn   = 0x12;
 515   2                waitFor = 0x10;
 516   2                break;
 517   2             case PCD_TRANSCEIVE:
 518   2                irqEn   = 0x77;
 519   2                waitFor = 0x30;
 520   2                break;
 521   2             default:
 522   2               break;
 523   2          }
 524   1         
 525   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 526   1          ClearBitMask(ComIrqReg,0x80);
 527   1          WriteRawRC(CommandReg,PCD_IDLE);
 528   1          SetBitMask(FIFOLevelReg,0x80);
 529   1          
 530   1          for (i=0; i<InLenByte; i++)
 531   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 532   1          WriteRawRC(CommandReg, Command);
 533   1         
 534   1          
 535   1          if (Command == PCD_TRANSCEIVE)
 536   1          {    SetBitMask(BitFramingReg,0x80);  }
 537   1          
 538   1          i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 539   1          do 
 540   1          {
 541   2               n = ReadRawRC(ComIrqReg);
 542   2               i--;
 543   2          }
 544   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 545   1          ClearBitMask(BitFramingReg,0x80);
 546   1                    
 547   1          if (i!=0)
 548   1          {    
 549   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 550   2               {
 551   3                   status = MI_OK;
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 10  

 552   3                   if (n & irqEn & 0x01)
 553   3                   {   status = MI_NOTAGERR;   }
 554   3                   if (Command == PCD_TRANSCEIVE)
 555   3                   {
 556   4                      n = ReadRawRC(FIFOLevelReg);
 557   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 558   4                      if (lastBits)
 559   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 560   4                      else
 561   4                      {   *pOutLenBit = n*8;   }
 562   4                      if (n == 0)
 563   4                      {   n = 1;    }
 564   4                      if (n > MAXRLEN)
 565   4                      {   n = MAXRLEN;   }
 566   4                      for (i=0; i<n; i++)
 567   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 568   4                  }
 569   3               }
 570   2               else
 571   2               {   status = MI_ERR;   }
 572   2              
 573   2         }
 574   1         
 575   1      
 576   1         SetBitMask(ControlReg,0x80);           // stop timer now
 577   1         WriteRawRC(CommandReg,PCD_IDLE); 
 578   1         return status;
 579   1      }
 580          
 581          
 582          /////////////////////////////////////////////////////////////////////
 583          //开启天线  
 584          //每次启动或关闭天线发射之间应至少有1ms的间隔
 585          /////////////////////////////////////////////////////////////////////
 586          void PcdAntennaOn()
 587          {
 588   1          unsigned char i;
 589   1          i = ReadRawRC(TxControlReg);
 590   1          if (!(i & 0x03))
 591   1          {
 592   2              SetBitMask(TxControlReg, 0x03);
 593   2          }
 594   1      }
 595          
 596          
 597          /////////////////////////////////////////////////////////////////////
 598          //关闭天线
 599          /////////////////////////////////////////////////////////////////////
 600          void PcdAntennaOff()
 601          {
 602   1          ClearBitMask(TxControlReg, 0x03);
 603   1      }
 604          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2639    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     238
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.00   RC522                                                                 05/17/2017 12:41:02 PAGE 11  

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
